=head1 PROMPT 01

It is 2024. Perl has limited thread safe operators. Everything else is the same as in 2021.

DWIM and TIMTOWDY are still very much alive.

=head1 Perl 5 + additional capabilities for SMP (shared memory programming and/or symmetric multi-process architectures (numa, e.g.))

C<map_r($num_threads)> - a threaded block that can be inserted into a traditional perl program, spawns C<$num_threads>)

C<atomic>              - like C<state> but provides a non-reference scalar value that can updated atomically in an SMP thread environment

C<my_r>                - like C<my>, but:

  * arrays are 'thread safe' meaning they can be updated concurrently by multiple threads

  * hashes, the same as arrays

  * scalars can only be references to anonymous thread safe hashes or arrays (otherwise, use C<atomic>)

C<local>               - inside of a C<map_r>, treated as a private thread variable

C<sub_r>               - 'thread safe' atomic subroutine, (critical section; like C<atomic> but for executed blocks)

C<*_r>                 - current perl5 supported keywords, functions, etc maybe used with a C<_r> to indicated
                      it is 'thread safe'; in some cases, the meaning should be clear (e.g., C<printf_r>); in
                      others, not so much (e.g., C<join_r>, C<split_r>, etc). You decide how that arc goes.

Be creative, this code will likely never run anywhere except in our heads. Feel free to change the rules (go nuts), just note
it in your contribution.

=head2 Reference counting

This is a valid concern some may not be able to suspend their disbelief during this excercise. I think it's consistent with
the model above to assume that there is some kind of new "thread scope"; this should preserve the notion that only one "line of execution" -
be it the main serial parent process (shared within a threaded scope) or variables declared in a singlular thread scope (thread-private);

See C<01/03-variable-scoping.pl> for an example.

=over 4

=item any variables declared in a "thread scope" are private to that thread (i.e., a thread can declare variables with C<my> which are private and C<local> behaves as it does now; maybe in a 'copy on write' sort of way)

=item threads can only share only variables declared outside of the thread scope; threads can't declare "shared" variables inside of thread scope

=back

=head1 General Rules

=over 4

=item 0. Added identify information in comments to show your grand kids (or don't)

=item 1. Write perl as you normally do + language additions above (or your variation)

=item 2. Limit examples to to short, easy to understand (50-100 lines) - don't reimplement DBI

=item 3. Under C<__END__>, show expected output that you think or expect would happen; otherwise describe what's going in words

=item 4. Please keep it clean (it's not *that* kind of fanfic)

=back

=head1 EXAMPLES

See,

C<01/01-hello.pl>

C<01/02-bakery.pl>

=head1 RELATED LINKS

L<https://linux.die.net/man/8/numactl>

L<https://github.com/marioroy/Chudnovsky-Pi>

L<https://github.com/ingydotnet/inline-c-pm/issues/47>

L<https://gcc.gnu.org/projects/gomp/>

L<https://www.brainkart.com/article/Shared-Memory-Programming-with-Pthreads_9338/>

L<https://www.openmp.org/spec-html/5.1/openmp.html>
