
A "new" keyword in Perl.

IV. Summary

This investigation of replacing "class" with "new" was interesting.
And while I do not think it is perfect, it does highlight a very
important aspect of getting this "modern" Perl OOP adopted by
traditional programmers.

1. (root issue)  automatic constructor construction is confusing;
We (and by that, I mean "I") very much like there being an explicit
"new" subroutine. This allows me to start at a reliable place in
code (even my own) that I have to figure out. Without a "sub new"
I am totally lost, and this is after some non-trivial effort to
like and use modern Perl OOP.

Meme idea: Old Lady at Wendy's saying, "where's the C<sub new>??"

2. the "80%" solution is to replace the "class" keyword with a
formal keyword that is familiar and idiomatically meaningful, "new".

Is there another solution? Other than of course, me getting even
better at avoiding modern Perl OOP?

III. Not a Perfect Idea 

I was hoping that by writing this up, it would occur to me why this
is a bad idea. The one issue I do see is that a class declaration
using a "new" keyword looks like the "discouraged" old form of
indirect syntax that was virtually outlawed by fiat, but is not
disallowed by the inter- preter:

	my $foo = new My::Object;

It is hard to tell the difference between that and something like
this example,

	use Object::Pad 0.16;
	 
	package My::Classname 1.23;
	class My::Classname;

Which, using the "new" keyword looks like this,

	use Object::Pad 0.16;
	 
	package My::Classname 1.23;
	new My::Classname;

II. A new "new" Keyword

The idea I had was the formalization of the familiar Perl idiom in
traditional Perl OOP. The "new" subroutine, an example of

	use v5.26;
	use Object::Pad;
	 
	new Point {
	   has $x :param = 0;
	   has $y :param = 0;
	 
	   method move ($dX, $dY) {
	      $x += $dX;
	      $y += $dY;
	   }
	 
	   method describe () {
	      print "A point at ($x, $y)\n";
	   }
	}
	 
	Point->new(x => 5, y => 10)->describe;

And by modifying another example on Object::Pad's POD, we get this
which I think shows that the approach makes code more familiar and
more read- able as things start getting more mixed - which it will
inevitably get:

	package ClassicPerlBaseClass {
	   sub new {
	      my $self = bless {}, shift;
	      say "Value seen by superconstructor is ", $self->get_value;
	      return $self;
	   }
	   sub get_value { return "A" }
	}
	 
	new DerivedClass :isa(ClassicPerlBaseClass) {
	   has $_value = "B";
	   BUILD {
	      $_value = "C";
	   }
	   method get_value { return $_value }
	}
	 
	my $obj = DerivedClass->new;
	say "Value seen by user is ", $obj->get_value;

I. Background

I was looking at the examples for Object::Pad, which as I understand,
is a a CPAN "experiment" to flesh out the syntax.

The first example (current to this writing) at the CPAN POD looks
like this,

	use v5.26;
	use Object::Pad;
	 
	class Point {
	   has $x :param = 0;
	   has $y :param = 0;
	 
	   method move ($dX, $dY) {
	      $x += $dX;
	      $y += $dY;
	   }
	 
	   method describe () {
	      print "A point at ($x, $y)\n";
	   }
	}
	 
	Point->new(x => 5, y => 10)->describe;

And as I stared at it, it just seemed like what one would expect.
However, I then got to this section in the POD:
    
	> Automatic Construction
        >
	> Classes are automatically provided with a constructor method,
	> called new, which helps create the object instances. This may
	> respond to passed arguments, automatically assigning values of
	> fields, and invoking other blocks of code provided by the class.
	> It proceeds in the following stages:

And then I realized why I have found any attempts at bringing "real"
OOP syntax to Perl extremely offputting. They all, afaik, try to
"help" by generating a "new" subroutine that acts as the constructor
in the same way as it would in traditional Perl OOP,

	sub new {
	  my ($pkg, @stuff) = @_;
	  my $self = {};
	  #.. do constructor stuff
	  bless $self, $pkg;
	  return $self
	}

As I continued to stare at the examples on the Object::Pad POD, it
occurred to me that:

* "class", while probably familiar to Perl programmers, probably
  invokes negative thoughts about things like Java, etc
* "class" is declarative, it is only used when describing the object
* "new", which is used as idiomatic Perl, is not explicitly declared;
  however it is then used any time the calling code wants to create
  a new object
* "class" is also 2 letters longer than "new"
* it is the inversion of "DWIM"

However, the absolute worst part about there being NO "new" subroutine
explicitly defined is that when dealing with other Perl programmers' code
who use the Meeses (or who would probably use Object::Pad/Corinna) is
that I *want* to find the "new" constructor as a point of solid ground
for figuring out what mess of a module I am digging into; except with
automatic constructor generation (i.e., the "new" subroutine), there is
no place to solid ground.

So what's the solution? Learn to look for "class"? No, as a Perl programmer
this fights against instinct I have. To say the this is not idiomatic -
but more importantly, harmful to my productivity, is an understatement.

If the new generation of POOP is to offer a bridge or attract traditional
Perl programmers, it must do better. There must be an idiomatic or
semantic bridge so that old farts like myself can start with some mom-
entum. 

Cheers,...
